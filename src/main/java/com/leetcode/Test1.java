package com.leetcode;

//字符频次唯一的最小删除次数

//如果字符串 s 中 不存在 两个不同字符 频次 相同的情况，就称 s 是 优质字符串 。
//
//给你一个字符串 s，返回使 s 成为 优质字符串 需要删除的 最小 字符数。
//
//字符串中字符的 频次 是该字符在字符串中的出现次数。例如，在字符串 "aab" 中，'a' 的频次是 2，而 'b' 的频次是 1 。
//
// 
//
//示例 1：
//
//输入：s = "aab"
//输出：0
//解释：
//s
// 已经是优质字符串。
//示例 2：
//
//输入：s = "aaabbbcc"
//输出：2
//解释：可以删除两个 'b' , 得到优质字符串 "aaabcc" 。
//另一种方式是删除一个 'b' 和一个 'c' ，得到优质字符串 "aaabbc" 。
//示例 3：
//
//输入：s = "ceabaacb"
//输出：2
//解释：可以删除两个 'c' 得到优质字符串 "eabaab" 。
//注意，只需要关注结果字符串中仍然存在的字符。（即，频次为 0 的字符会忽略不计。）

//提示： 1 <= s.length <= 105
//      s 仅含小写英文字母



//给你两个字符串 s 和 t ，你的目标是在 k 次操作以内把字符串 s 转变成 t 。
//
//        在第 i 次操作时（1 <= i <= k），你可以选择进行如下操作：
//
//        选择字符串 s 中满足 1 <= j <= s.length 且之前未被选过的任意下标 j （下标从 1 开始），并将此位置的字符切换 i 次。
//        不进行任何操作。
//        切换 1 次字符的意思是用字母表中该字母的下一个字母替换它（字母表环状接起来，所以 'z' 切换后会变成 'a'）。
//
//        请记住任意一个下标 j 最多只能被操作 1 次。
//
//        如果在不超过 k 次操作内可以把字符串 s 转变成 t ，那么请你返回 true ，否则请你返回 false 。
//
//
//
//        示例 1：
//
//        输入：s = "input", t = "ouput", k = 9
//        输出：true
//        解释：第 6 次操作时，我们将 'i' 切换 6 次得到 'o' 。第 7 次操作时，我们将 'n' 切换 7 次得到 'u' 。
//        示例 2：
//
//        输入：s = "abc", t = "bcd", k = 10
//        输出：false
//        解释：我们需要将每个字符切换 1 次才能得到 t 。我们可以在第 1 次操作时将 'a' 切换成 'b' ，但另外 2 个字母在剩余操作中无法再转变为 t 中对应字母。
//        示例 3：
//
//        输入：s = "aab", t = "bbb", k = 27
//        输出：true
//        解释：第 1 次操作时，我们将第一个 'a' 切换 1 次得到 'b' 。在第 27 次操作时，我们将第二个字母 'a' 切换 27 次得到 'b' 。
//
//
//        提示：
//
//        1 <= s.length, t.length <= 10^5
//        0 <= k <= 10^9
//        s 和 t 只包含小写英文字母。



//题目描述
//        提交记录
//        给你一个字符串 s ，每一次操作你都可以在字符串的任意位置插入任意字符。
//
//        请你返回让 s 成为回文串的 最少操作次数 。
//
//        「回文串」是正读和反读都相同的字符串。
//
//
//
//        示例 1：
//
//        输入：s = "zzazz"
//        输出：0
//        解释：字符串 "zzazz" 已经是回文串了，所以不需要做任何插入操作。
//        示例 2：
//
//        输入：s = "mbadm"
//        输出：2
//        解释：字符串可变为 "mbdadbm" 或者 "mdbabdm" 。
//        示例 3：
//
//        输入：s = "leetcode"
//        输出：5
//        解释：插入 5 个字符后字符串变为 "leetcodocteel" 。
//        示例 4：
//
//        输入：s = "g"
//        输出：0
//        示例 5：
//
//        输入：s = "no"
//        输出：1
//
//
//        提示：
//
//        1 <= s.length <= 500
//        s 中所有字符都是小写字母。
public class Test1 {

    public static void main(String[] args) {
        String s = "aab";
        int[] charCountArr = new int[26];
        char[] charArr = s.toCharArray();
        for (char c : charArr) {
            System.out.println((int) c);
        }
    }

}
