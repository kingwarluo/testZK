package com.random;

/**
 * 位运算
 * &、|、^、~、>>、<<
 *
 * @author jianhua.luo
 * @date 2020/1/17
 */
public class BitOperation {

    public static void main(String[] args) {

        // 先理清概念：-1在计算机里的二进制表示：11111111 11111111 11111111 11111111，原因：先取原码00000000 00000000 00000000 00000001，
        // 得反码11111111 11111111 11111111 11111110，反码+1后得补码：11111111 11111111 11111111 11111111

        // *****加减运算 高位舍弃********

        // 与&:两位同时为1，结果才为1，否则结果为0
        //  1）清零
        //    如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。
        //  2）取一个数的指定位
        //    比如取数 X=1010 1110 的低4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位与运算（X&Y=0000 1110）即可得到X的指定位。
        //  3）判断奇偶
        //    只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((a & 1) == 0)代替if (a % 2 == 0)来判断a是不是偶数。
        // 35:  0 0 1 0 0 0 1 1
        // 47:  0 0 1 0 1 1 1 1
        System.out.println(35 & 47);

        // 或|:参加运算的两个对象只要有一个为1，其值为1
        //  1）常用来对一个数据的某些位设置为1
        //    比如将数 X=1010 1110 的低4位设置为1，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位或运算（X|Y=1010 1111）即可得到。
        System.out.println(174 | 1);
        // 3:  0 0 0 0 0 0 1 1
        // 5:  0 0 0 0 0 1 0 1
        System.out.println(3 | 5);

        // 异或^:两个位相同为0，相异为1
        // 1）翻转指定位
        //   比如将数 X=1010 1110 的低4位进行翻转，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行异或运算（X^Y=1010 0001）即可得到。
        // 2）与0相异或值不变
        //   例如：1010 1110 ^ 0000 0000 = 1010 1110
        // 3）交换两个数
        // 3:  0 0 0 0 0 0 1 1
        // 5:  0 0 0 0 0 1 0 1
        System.out.println(3 ^ 5);

        // 取反~:0变1，1变0
        // 1）使一个数的最低位为零
        //   使a的最低位为0，可以表示为：a & ~1。~1的值为 1111 1111 1111 1110，再按"与"运算，最低位一定为0。因为“ ~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。
        // 3的原码:00000000 00000000 00000000 00000011
        // 3的反码:11111111 11111111 11111111 11111100
        // 3的补码:11111111 11111111 11111111 11111100
        // 负数求反码:11111111 11111111 11111111 11111011
        // 负数求原码:10000000 00000000 00000000 00000100  = -4
        System.out.println("~3=" + ~3);

        // 左移<<:各二进位全部左移若干位，高位丢弃，低位补0
        System.out.println(3 << 2);

        // 右移>>:各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移>>），有的补0（逻辑右移>>>）
        // -2原码:10000000 00000000 00000000 00000010
        // -2反码:11111111 11111111 11111111 11111101
        // -2补码:11111111 11111111 11111111 11111110
        // -2右移两位补码:11111111 11111111 11111111 11111111
        // -2右移两位反码:11111111 11111111 11111111 11111110
        // -2右移两位原码:10000000 00000000 00000000 00000001 = -1
        System.out.println(-2 >> 2);
        // -101原码:10000000 00000000 00000000 01100101
        // -101反码:11111111 11111111 11111111 10011010
        // -101补码:11111111 11111111 11111111 10011011
        // -101右移两位补码:11111111 11111111 11111111 11100110
        // -101右移两位反码:11111111 11111111 11111111 11100101
        // -101右移两位原码:10000000 00000000 00000000 00011010 = -26
        System.out.println(-101 >> 2);
        // -101原码:10000000 00000000 00000000 01100101
        // -101反码:11111111 11111111 11111111 10011010
        // -101补码:11111111 11111111 11111111 10011011
        // -101无符号右移两位补码（逻辑右移）:00111111 11111111 11111111 11100110 = 1073741798
        System.out.println(-101 >>> 2);

    }

}
