https://blog.csdn.net/striveb/article/details/84063712

TCP协议：位于传输层，提供可靠的字节流服务。
1、三次握手和四次挥手
三次握手：
1、建立连接时，客户端向服务器端发送SYN包（SYN=j） ，客户端进入SYN_SENT状态
2、服务器端接收到SYN包侯，确认客户端的SYN（ACK=j+1），同时自己也给客户端发送一个SYN包（SYN=k） ，即ACK+SYN，服务器进入SYN_RECV状态
3、客户端收到服务器的ACK+SYN后，向服务器发送一个ACK包（ACK=k+1），发送完毕，完成三次握手。服务器和客户端同时进入ESTABLISHED状态，可以传输数据。

四次挥手（TCP是全双工，每个方向都要单独关闭）：
1、当客户端完成数据发送任务后，并主动发送一个FIN（finish，FIN=m）通知服务端不再有数据流动，
2、服务端接收到FIN后，服务端被动关闭连接，发送一个ACK（ACK=m+1）给客户端。
3、服务端完成数据发送任务后，向客户端主动发送FIN（FIN=n）
4、客户端接收到FIN后，客户端被动关闭连接，发送一个ACK（ACK=n+1）给服务端。


2、深入理解TCP连接
一个TCP连接在接收到FIN后还能继续发送数据。
连接的关闭顺序，是’先关读，再关写‘，总共需要4阶段，以客户端发起关闭连接为例：1、服务器读通道关闭 2、客户端写通道关闭 3、客户端读通道关闭 4、服务端写通道关闭


3、TCP使用滑动窗口进行流量控制
建立连接时，各端分配一个缓冲区来存储接收的数据，并将缓冲区的尺寸发送给另一端。接收方发送的确认消息中包含了自己剩余的缓冲区尺寸，剩余缓冲区空间的数量就叫做窗口。
其实就是建立连接的双方互相知道彼此剩余的缓冲区大小。


4、拥塞控制
1、拥塞控制：防止过多的数据注入到网络中，使网络中的路由器或链路不至于阻塞。拥塞控制是一个全局性的过程，和流量控制不同，流量控制是点对点的控制
	慢开始：发送方维持一个叫拥塞窗口（congestion window 简称cwnd）的状态变量。cwnd一开始=1，每收到一次确认就加1。为了防止cwnd增长过大引起网络堵塞，还需设置一个慢开始门限ssthresh
			当cwnd<ssthresh时，使用慢开始算法，当cwnd>ssthresh时，使用拥塞避免算法，当cwnd=ssthresh时，慢开始和拥塞避免算法任意。

2、拥塞避免：拥塞避免让拥塞窗口增长缓慢，即每经过一个往返时间RTT就把发送方的拥塞窗口数量+1，而不是加倍，这样拥塞窗口按线性规律缓慢增长
			无论在慢开始阶段还是拥塞避免阶段，只要发送方判断出现网络拥塞（根据是没收到确认），就把慢开始门限设置为出现拥塞时发送窗口的一般（例如出现拥塞时，拥塞窗口为24，慢开始门限改为12），然后把拥塞窗口设置为1，执行慢开始算法。
			

			
			
UDP协议：