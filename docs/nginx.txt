Nginx下载安装
下载包：wget http://nginx.org/download/nginx-1.13.0.tar.gz
解压到tar -zxvf /usr/local/nginx-1.13.0.tar.gz
编译到nginx目录：./configure --prefix=/usr/local/nginx
	错误：error: C compiler cc is not found
	resolve:yum install gcc gcc-c++ ncurses-devel perl
	错误：error: the HTTP rewrite module requires the PCRE library
	resolve:yum install pcre pcre-devel
	错误：error: the HTTP gzip module requires the zlib library
	resolve:yum install zlib gzip zlib-devel
安装Nginx：make & make install
Nginx启动：cd /usr/local/nginx/sbin
		   ./nginx
访问：开放80端口（centos7）
	firewall-cmd --zone=public --add-port=80/tcp --permanent
	重启防火墙：firewall-cmd  --reload
	命令含义：
	--zone #作用域
	--add-port=80/tcp  #添加端口，格式为：端口/通讯协议
	--permanent   #永久生效，没有此参数重启后失效


Nginx 相对于 Apache 优点：
1) 高并发响应性能非常好，官方 Nginx 处理静态文件并发 5w/s
2) 反向代理性能非常强。（可用于负载均衡）
3) 内存和 cpu 占用率低。（为 Apache 的 1/5-1/10）
4) 对后端服务有健康检查功能。
	https://www.cnblogs.com/rainy-shurun/p/5416160.html
	1、ngx_http_proxy_module 模块和ngx_http_upstream_module模块（自带）
    http://nginx.org/cn/docs/http/ng ... proxy_next_upstream
	2、nginx_upstream_check_module模块
    https://www.cnblogs.com/handsomeye/p/9604785.html
5) 支持 PHP cgi 方式和 fastcgi 方式。
6) 配置代码简洁且容易上手。 

配置文件：

location ~* /js/.*/\.js
以 = 开头，表示精确匹配；如只匹配根目录结尾的请求，后面不能带任何字符串。
以^~ 开头，表示uri以某个常规字符串开头，不是正则匹配
以~ 开头，表示区分大小写的正则匹配;
以~* 开头，表示不区分大小写的正则匹配
以/ 开头，通用匹配, 如果没有其它匹配,任何请求都会匹配到

#以下是一些反向代理的配置可删除
proxy_redirect             off; 
#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
proxy_set_header           Host $host; 
proxy_set_header           X-Real-IP $remote_addr; 
proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for; 
client_max_body_size       10m; #允许客户端请求的最大单文件字节数
client_body_buffer_size    128k; #缓冲区代理缓冲用户端请求的最大字节数
proxy_connect_timeout      300; #nginx跟后端服务器连接超时时间(代理连接超时)
proxy_send_timeout         300; #后端服务器数据回传时间(代理发送超时)
proxy_read_timeout         300; #连接成功后，后端服务器响应时间(代理接收超时)
proxy_buffer_size          4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
proxy_buffers              4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
proxy_busy_buffers_size    64k; #高负荷下缓冲大小（proxy_buffers*2）
proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传

=================================实际使用建议==========================================
#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。
#这里是直接转发给后端应用服务器了，也可以是一个静态首页
# 第一个必选规则location = / {
proxy_pass  http://tomcat:8080/index
}
# 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项
# 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用
location ^~ /static/ {
root /webroot/static/;
}
location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ {
root /webroot/res/;
}
#第三个规则就是通用规则，用来转发动态请求到后端应用服务器
#非静态文件请求就默认是动态请求，自己根据实际把握#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了
location / {
proxy_pass  http://tomcat:8080/
}

==================================================完整例子==================================================
http {
    # 定义image日志格式
    log_format imagelog '[$time_local] ' $image_file ' ' $image_type ' ' $body_bytes_sent ' ' $status;
    # 开启重写日志
    rewrite_log on;

    server {
        root /home/www;

        location / {
                # 重写规则信息
                error_log logs/rewrite.log notice; 
                # 注意这里要用‘’单引号引起来，避免{}
                rewrite '^/images/([a-z]{2})/([a-z0-9]{5})/(.*)\.(png|jpg|gif)$' /data?file=$3.$4;
                # 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行
                set $image_file $3;
                set $image_type $4;
        }

        location /data {
                # 指定针对图片的日志格式，来分析图片类型和大小
                access_log logs/images.log mian;
                root /data/images;
                # 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里
                try_files /$arg_file /image404.html;
        }
        location = /image404.html {
                # 图片不存在返回特定的信息
                return 404 "image not found\n";
        }
}
对形如/images/ef/uh7b3/test.png的请求，重写到/data?file=test.png，于是匹配到location /data，先看/data/images/test.png文件存不存在，
如果存在则正常响应，如果不存在则重写tryfiles到新的image404 location，直接返回404状态码。