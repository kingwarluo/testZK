es学习日志

RestClient API

<Elasticsearch权威指南> : https://www.elastic.co/guide/cn/elasticsearch/guide/current/intro.html

<Elasticsearch 官方文档> : https://www.elastic.co/guide/en/elasticsearch/reference/current/_basic_concepts.html

1、基础知识
安装

2、映射基础
text:支持分词索引，支持模糊（match）&精确查询，不支持聚合。一般用于全文搜索，比如博客内容检索，在检索前需要对内容进行分词操作，不能用该字段进行排序，一般不用来做聚合操作。
keyword:不支持分词索引，支持模糊（match）&精确查询，支持聚合。一般用来索引结构化的内容(如邮箱地址，电话号码，状态，性别)。一般用来进行状态过滤、聚合、排序操作。

3、搜索基础

精确值查找
当进行精确值查找的时候通常使用filter(过滤器)，filter的执行速度非常快(不需要进行评分，在数据量一定的范围内容易被缓存在内存中)。想要提高性能，应该尽可能多的使用过滤器。
--查询流程为：
1.term在倒排索引中获取到符合条件的文档有三个。
2.创建位图(bitset，只包含0和1，1代表文档符合过滤器条件，0则代表不符合)。关于bitset想要了解更多可以点击：roaring bitmap
3.迭代bitsets从而获取到符合条件的文档集合，迭代会优先迭代稀疏的bitset(可以排除掉大量不符合条件的文档)
4.es会保存下每次查询的使用次数。如果查询在最近的 256 次查询中会被用到，那么它就会被缓存到内存中。当 bitset 被缓存后，注: 低于 10,000 个文档（或少于 3% 的总索引数）的段（segment）不会被缓存。
5.补充：一旦缓存成功了，那么bitset将会一只驻留在内存中知道它被剔除。剔除的规则是基于LRU算法(最近最少使用)来实现

全文检索&分析器
相关性：评价结果和查询条件的匹配程度，并根据相关性作为默认的排序条件.
	检索词频率：检索词在该文档中出现的频率（出现的次数越多，相关性越高）
	反向文档频率：检索词在该索引上所有文档中出现的频率（出现的次数越多，相关性越低）
	字段长度准则：在文档中，字段的内容的长度（字段越长，相关性越低）
分析：将文本转换为有区别的、规范化的一个token的过程。目的就是为了创建倒排索引。
倒排索引：适用于全文搜索的数据结构。有文档中不重复的词的列表构成，对于每一个不重复的词，都一个列表，这个列表即为包含该词的文档。
分析的流程：将一块文本分解成适合于倒排索引的词条，然后将这些词条统一格式化，从而提高可搜索性。
	字符过滤器：在分词前整理字符串。比如，可以用来去掉HTML，或者将 & 转化成 `and`。
	分词器：将字符串分为单个的词条。一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条。
	Token过滤器：该过滤器可能会改变词条（例如，将大些字母转换为小写），删除词条（像` a`， `and`， `the` 等无用词），或者增加词条（像 jump 和 leap 这种同义词）


4、分页
from/size:原理类似于mysql的limit，查询的数据越往后，效率越低
scroll:原理类似于消息消费机制，首次查询会保存一个历史快照及游标（scroll_id），记录当前消息查询的终止位置，下次查询的时候将基于游标进行消费(性能良好，维护成本高，在游标失效前，不会更新数据，不够灵活，一旦游标创建size就不可改变，适用于大量数据导出或者索引重建)
search_after:性能优秀，类似于优化后的分页查询，历史条件过滤掉数据

总结：在分页的场景中，不建议直接使用scroll，scroll无法保证数据实时更新，数据量较小而有随机分页的场景可以使用from/size的方式分页，而在大多数场景中推荐使用search_after。

5、层级文档
理解为mysql多表关联

6、聚合基础