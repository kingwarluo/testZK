JVM部分

1、程序计数器
程序计数器是一块很小的内存空间，用于记录下一条要运行的指令。每个线程都需要一个程序计数器，各个线程之中的计数器相互独立，是线程中私有的内存空间
此内存区域时唯一一个在java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。

2、java虚拟机栈
java虚拟机栈也是线程私有的内存空间，它和java线程同一时间创建，描述的是java方法执行的内存模型：每个方法在执行时都会创建一个栈帧（StackFrame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。
每一个方法从调用直至执行结束，就对应着一个栈帧从虚拟机栈中入栈到出栈的过程。
栈帧：方法的执行过程
局部变量表：（即栈）存放了编译期可知的各种基本类型（boolean、byte、char、short、int、long、float、double）、对象引用（reference类型）和returnAddress类型（指向一条字节码指令的地址）
操作数栈：暂存基本类型和对象引用的区域
动态链接：帮助找到方法区  跟方法的代码的相关信息
返回值地址：

StackOverFlowError：线程请求栈深度大于虚拟机所允许的深度
OutOfMemoryError：如果虚拟机栈可以动态拓展，而拓展时无法申请到足够的内存

TIPS：对象引用（reference类型）不止存在于java虚拟机栈，还可以存在方法区、堆内存等。


3、本地方法栈
本地方法栈和java虚拟机栈的功能相似，java虚拟机栈用于管理java函数的调用，而本地方法栈用于管理本地方法（Native方法）的调用，但不是由java实现的，而是由C实现的。
StackOverFlowError：
OutOfMemoryError：



4、java堆
对于绝大多数应用来说，这块区域是JVM所管理的内存中最大的一块。线程共享，主要是存放对象实例和数组。内部会划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer， TLAB），可以位于物理上不连续的空间，但逻辑上要连续。
OutOfMemoryError：如果堆中没有内存完成实例分配，并且堆也无法再进行扩展时，抛出该异常

java堆：存储了new HashMap()，实例对象。
1、堆里面存了对象，实际只存储了属性信息，方法信息存储在方法区，还有对象头？？
2、堆内存分为新生代、老年代
3、对象何时被回收，可达性分析算法，从GC roots下发，能找到对象的引用，表示可达，不能回收。
	GC roots可以是：1、虚拟机栈 2、方法中静态属性引用的对象 3、方法区中常量引用的对象 4、NATIVE方法引用的对象

5、方法区
也被称为永久区，与堆空间相似，被JVM中所有的线程共享。方法区主要保存的信息是类的元数据，方法区中最为重要的是类的类型信息、常量池、域信息、方法信息、静态变量、即时编译器编译后的代码等数据。
对永久区的GC回收，一是GC对永久区常量池的回收，二是永久区对元数据的回收
OutOfMemoryError：运行时常量池，编译器和运行期（String的intern()）都可以将常量放入池中，内存有限，无法申请时抛出OutOfMemoryError

方法区：存储类的元信息，Map.class是类还是接口，有哪些属性，属性的修饰符等。永久代保存在方法区，在JDK7提出，JDK8已经没有永久代。
GC条件：要回收方法区的类对象，堆内存的实例对象要先被回收，Map类的classLoader被回收，堆Map.class的引用回收


==>.class文件的信息
==>java类指令，存储在方法区
==>java类指令是怎么执行的



线上问题：
1、如何查看jvm堆内存使用量，老年代内存空间、老年代回收次数、老年代回收时长
2、dump 堆内存 和 dump 线程
	【内存dump】
	jmap –dump:live,format=b,file=heap.bin
	jmap -dump:format=b,file=serviceDump.dat 6214
	参考资料：http://docs.oracle.com/javase/6/docs/technotes/tools/share/jmap.html将生成的heap.bin文件，使用ha456.jar工具打开分析。java -jar -Xmx3000m ha456.jar
	【线程dump】
	jstack -m >jvm_deadlocks.txt
	jstack -l >jvm_listlocks.txt
	参考资料http://docs.oracle.com/javase/6/docs/technotes/tools/share/jstack.html
3、jprofiler 分析神器

jvm调优：https://www.cnblogs.com/likehua/p/3369823.html

神州JDK1.7的JVM配置：
-Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Xms4135m -Xmx4135m -Xmn512m -Xss256k -XX:PermSize=256m -XX:MaxPermSize=256m -XX:SurvivorRatio=8 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+UseCMSCompactAtFullCollection -XX:+CMSParallelRemarkEnabled -XX:CMSInitiatingOccupancyFraction=70 -Dcom.sun.management.jmxremote -Dcom.sun.management.snmp.port=8044 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=8045 -Djava.rmi.server.hostname=10.204.114.170 -Djdk.tls.ephemeralDHKeySize=2048 -Dcatalina.base=/usr/local/tomcat -Dcatalina.home=/usr/local/tomcat -Djava.io.tmpdir=/tmp

神州JDK1.8的JVM配置：
-Djava.awt.headless=true -Djava.net.preferIPv4Stack=true -Djava.io.tmpdir=/usr/local/springboot/tmp -Xmx3935m -Xms3935m -Xmn1475m -XX:+DisableExplicitGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:LargePageSizeInBytes=128m -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70 -Dlogging.path=/usr/local/springboot/logs -Dserver.tomcat.basedir=/usr/local/springboot/tomcat -Dserver.tomcat.accesslog.enabled=true -Dserver.tomcat.accesslog.directory=/usr/local/springboot/logs