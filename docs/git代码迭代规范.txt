一、 远程分支的分类及内容

Git远程仓库上的分支分类主要可以分成以下四类，每一类的用途、权限及合并方式各有不同。

1、 master：主干分支，该分支的内容与当前时间生产环境上部署的内容保持一致（预生产测试期间除外）。

2、 release：迭代分支，该分支的内容为当前正在测试中的内容。

3、 develop：开发分支，该分支的内容为当前正在开发中的内容。

4、 hotfix：补丁分支，该分支内容为计划外的紧急修复内容。



GIT版本规范：GIT版本规范



 

二、 远程分支各场景使用流程

 

1、 常规开发

在确定好一次开发计划后，按照开发、测试流程，各分支活动情况如下：

1） 项目管理人员按照版本号从mater新建develop（开发）分支，如feature_mmc_v1.0.0_dev。

2） 开发人员检出develop分支到本地，进行开发。

3） 开发人员在develop分支上提交代码、合并冲突。

4） 开发并自测完毕，开发组提交测试，项目管理人员从develop分支创建release分支，如feature_mmc_v1.0.0_release。并将develop（开发）分支合并到release（迭代）分支。

5） 测试人员部署release分支并进行测试，提出bug。

6） 开发人员解决bug，并将代码提交到develop分支。

7） 测试人员完成一轮测试，通知项目管理人员，项目管理再进行一次将develop分支合并到release分支的操作

8） 重复5）到7）的步骤，直到测试周期结束，项目可以上预生产。

9） 项目管理人员将release分支合并到master

10） 测试人员在预生产上部署master分支，进行上线前校验。

11） 若预生产有问题，重复5) 到10）重新进行程序验证。若无问题，则可以上线。

12） 为master打一个tag，如mmc_tag_v1.0.0_20190403，在线上部署tag。

13）预生产部署用master,线上(生产)部署TAG，版本号：dev、release、master（主干除外），tag同一个需求都对应同一个版本，比如feature_mmc_v1.0.0_dev 、feature_mmc_v1.0.0_release、master（主干不需要）、mmc_tag_v1.0.0_20190318。

 

2、 多开发分支并行开发

有些时候会碰到同一个项目中，有数个需求需要并行开发，这些需求之间没有强开发顺序关系，可以各自并行开发后联调，或上线时间不一致，则按照以下流程进行。

1） 项目管理人员按照版本号从master创建多个 develop（开发）分支，如feature_mmc_v1.0.0_model1_dev 、feature_mmc_v1.0.0_model2_dev、feature_mmc_v1.0.0_all_dev。

2） 开发人员各自在开发分支上开发。

3） model1先提测，则model1先merge到feature_mmc_v1.0.0_all_dev分支、再由feature_mmc_v1.0.0_all_dev创建release分支 

4） 几天后model2提测，则model2合并到feature_mmc_v1.0.0_all_dev 分支。

5） 依次类推



3、 多测试分支并行测试

有些时候会碰到同一个项目中，有数个版本的代码需要并行进行测试，并且各个版本上线时间有先后，则按照以下流程进行（此处以1.0.0 和 1.1.0为例）。

1） 项目管理人员从master创建feature_mmc_v1.0.0_dev分支，进行1期开发，开发完毕后提测，创建feature_mmc_v1.0.0_release分支。

2） 为提高效率，提测后继续进行2期需求的开发，同时需要保证1.0.0版本正常上线不受2期开发代码的影响，则从feature_mmc_v1.0.0_dev拉出新的开发分支 feature_mmc_v1.1.0_dev。

3） 在feature_mmc_v1.1.0_dev 分支上进行2期需求开发，同时在feature_mmc_v1.0.0_dev上进行1期的bug修复，feature_mmc_v1.0.0_dev可按正常流程向feature_mmc_v1.0.0_release、master进行合并。

4） 2期需求开发期间，可以定时把feature_mmc_v1.0.0_dev 合并至feature_mmc_v1.1.0_dev，减少后期合并及自测工作量。

5） 2期需求开发完毕后提测，创建feature_mmc_v1.1.0_release分支，进行测试，在每一轮迭代测试结束后，将feature_mmc_v1.0.0_dev 的改动合并至feature_mmc_v1.1.0_dev，进行下一轮迭代。

6） 1期结束迭代并上线完毕，将feature_mmc_v1.0.0_dev 合并至 feature_mmc_v1.1.0_dev，结束feature_mmc_v1.0.0_dev的使用。

7） feature_mmc_v1.1.0_dev继续正常的迭代流程直至上线。



注：多测试分支并行测试的原则主要是：高版本的开发不影响低版本的上线进度、低版本同时向高版本（横向）及测试分支（纵向）合并，将冲突在dev分支层全部解决。 低版本向高版本合并的频次可以根据改动的多少、及迭代的频率调整。

 

4、 紧急修复线上bug

若线上发生计划外的、耗时不长、参与人数不多的，需要快速响应的问题，则按照以下流程快速处理

1） 项目管理人员按照紧急修复版本号从相应修复版本的TAG创建hotfix分支，如feature_mmc_v1.0.0_20190315_hotfix。

2） 开发人员检出hotfix分支，并修改代码，提交。

3） 测试人员部署hotfix分支，在测试环境进行校验。

4） 将hotfix分支合并到master，预生产部署master （若此时预生产有正在进行的上线前验证，导致无法直接合并master，则直接部署hotfix），并进行校验。

5） 预生产校验完毕后打tag（很重要）如 mmc_tag_v1.0.0_20190403（TAG的描述要写清楚，写详细，重要）。备注：20190403日期为当天打TAG的日期，线上部署tag。

6）若此时有正在进行中的开发，则将hotfix代码merge回各个分支，走正常开发流程的回归测试。

注：若线上bug不是短时间、一两个人可以解决的，建议还是走常规开发，使用多分支并行开发。Hotfix只用于修复需要快速响应的bug。