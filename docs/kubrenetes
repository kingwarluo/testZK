1、pod生命周期

2、pod调度
自动调度：Scheduler计算出pod运行在哪个节点
定向调度：跳过Scheduler调度，直接匹配NodeName（node名称匹配）、NodeSelector（给node打标签）
亲和性调度：定向调度NodeSelector的拓展，如果没有，也可以调度到不满足条件的节点上，
    NodeAffinity(node亲和性）：以node为目标，解决pod可以调度到哪些node的问题
        pod.spec.affinity.nodeAffinity
          requiredDuringSchedulingIgnoredDuringExecution  Node节点必须满足指定的所有规则才可以，相当于硬限制（找不到会调度失败）
            nodeSelectorTerms  节点选择列表
              matchFields   按节点字段列出的节点选择器要求列表
              matchExpressions   按节点标签列出的节点选择器要求列表(推荐)
                key    键
                values 值
                operator 关系符 支持Exists（存在）, DoesNotExist（不存在）, In（范围）, NotIn（范围取反）, Gt（大于）, Lt（小于）
          preferredDuringSchedulingIgnoredDuringExecution 优先调度到满足指定的规则的Node，相当于软限制 (倾向，找不到不会调度失败)
            preference   一个节点选择器项，与相应的权重相关联
              matchFields   按节点字段列出的节点选择器要求列表
              matchExpressions   按节点标签列出的节点选择器要求列表(推荐)
                key    键
                values 值
                operator 关系符 支持In, NotIn, Exists, DoesNotExist, Gt, Lt
            weight 倾向权重，在范围1-100。
    PodAffinity(pod亲和性) ：以pod为目标，解决pod可以和哪些已存在的pod部署在同一个拓扑域中的问题
        pod.spec.affinity.podAffinity
          requiredDuringSchedulingIgnoredDuringExecution  硬限制
            namespaces       指定参照pod的namespace
            topologyKey      指定调度作用域
            labelSelector    标签选择器
              matchExpressions  按节点标签列出的节点选择器要求列表(推荐)
                key    键
                values 值
                operator 关系符 支持In, NotIn, Exists, DoesNotExist.
              matchLabels    指多个matchExpressions映射的内容
          preferredDuringSchedulingIgnoredDuringExecution 软限制
            podAffinityTerm  选项
              namespaces
              topologyKey
              labelSelector
                matchExpressions
                  key    键
                  values 值
                  operator
                matchLabels
            weight 倾向权重，在范围1-100
    PodAntiAffinity(pod反亲和性) ：以pod为目标，解决pod不能和哪些已存在pod部署在同一个拓扑域中的问题
污点(taint)和容忍（toleration）调度：污点就是拒绝，容忍就是忽略
    node节点设置污点，key=value:effect形式，如name=nginx:NoSchedule，effect有如下三种：
        PreferNoSchedule（最好不要来，实在没资源就来吧）
        NoSchedule（不要来了，已经在的就在了）
        NoExecute（不要来了，已经在的就驱逐）
    pod设置容忍：
        tolerations:      # 添加容忍
          - key: "tag"        # 要容忍的污点的key
            operator: "Equal" # 操作符
            value: "heima"    # 容忍的污点的value
            effect: "NoExecute"   # 添加容忍的规则，这里必须和标记的污点规则相同
3、控制器
ReplicaSet：保障有特定数量的pod正在运行
Deployment：滚动升级、扩缩容、副本等功能，一般用于无状态的应用
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: nginx-deployment
      labels:
        app: nginx
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: nginx # Depolyment管理label app=nginx的pod
      template:
        metadata:
          labels:
            app: nginx # pod的label app=nginx
        spec:
          containers:
          - name: nginx
            image: nginx:1.17.1
            ports:
            - containerPort: 80
StatefulSet：有序命名、有序启停、pod采用稳定的持久化存储卷（PV或PVC实现），保证数据安全、实现稳定持久化存储状态数据
    -- 拓展：有了这个编号后StatefulSet就使用Kubernetes里的两个标准功能：Headless Service 和 PV/PVC,实现了对 Pod 的拓扑状态和存储状态的维护
hpa：自动监测当前负载（如：cpu利用率），进行扩缩容
DaemonSet：为集群每个Node创建一个pod，默认添加对所有节点污点的容忍
Job：
CornJob：
4、service和ingress


5、存储（pod内的容器共享存储）
基础存储
    EmptyDir：空目录，存储在pod内部。pod销毁则数据消失
        spec:
          containers:
          - image: nginx:1.17.1
            name: nginx
            volumeMounts:
            - mountPath: /opt
              name: empty-dir
          - image: nginx:1.17.1
            name: nginx2
            volumeMounts:
            - mountPath: /mnt
              name: empty-dir
          volumes:
          - name: empty-dir
            emptyDir: {}
    HostPath：存储在node节点，pod部署另一个节点，数据消失
        spec:
          volumes:
          - name: timezone
            hostPath:
              path: /etc/timezone
              type: File
              # type: DirectoryOrCreate
    NFS或CIFS：存储在独立的存储集群，pod重新分配到别的node，数据不会消失
        spec:
          volumes:
          - name: nfs-volume
            nfs:
              server: 192.168.1.34
              path: /data/nfs/test_nfs
高级存储
    PV（PersistentVolume）：无命名空间限制，kubernetes管理员维护(属于集权，属于跨namespace的)
    PV状态：Available（可用）/Bound（已绑定PVC）/Released（PVC被删除，资源还不可用）/Failed
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: pv2
        spec:
          nfs: # 存储类型，与底层真正存储对应(根据底层存储改变类型)
          capacity:  # 存储能力，目前只支持存储空间的设置
            storage: 3Gi
          accessModes: ReadWriteOnce/ReadOnlyMany/ReadWriteMany # 访问模式(Once Many为单/多节点挂载)
          storageClassName: nfs-slow # 存储类别
          persistentVolumeReclaimPolicy: Retain/Recycle/Delete # 回收策略
    PVC（PersistentVolumeClaim）：kubernetes用户维护(属于namespace的)
        kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
          name: nfs-pvc-claim
          namespace: default
        spec:
          storageClassName: nfs-slow #要求PV一致
          accessModes:
            - ReadWriteOnce # accessModes要一致
          resources:
            requests:
              storage: 3Gi #小于等于PV大小
自身资源
    configmap：
        # 创建configMap,   special.how: very   键名：键值
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: special-config
          namespace: default
        data:
          special.how: very
          special.type: charm

        # 创建第二个configMap
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: env-config
          namespace: default
        data:
          log_level: INFO

        # 第一种方式： 在pod中使用configmap配置,使用ConfigMap来替代环境变量
        spec:
          containers:
            - name: test-container
              image: hub.kaikeba.com/library/myapp:v1
              command: ["/bin/sh", "-c", "env"]
              env:
                - name: SPECIAL_LEVEL_KEY
                  valueFrom:
                    configMapKeyRef:
                      name: special-config  # 第一种导入方式：在env中导入
                      key: special.how
                - name: SPECIAL_TYPE_KEY
                  valueFrom:
                    configMapKeyRef:
                      name: special-config
                      key: special.type
              envFrom:                      # 第二种导入方式，直接使用envFrom导入
                - configMapRef:
                    name: env-config
        # 第二种方式：用ConfigMap设置命令行参数
        spec:
          containers:
            - name: test-container
              image: hub.kaikeba.com/library/myapp:v1
              command: [ "/bin/sh", "-c", "echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)" ]
              env:
                - name: SPECIAL_LEVEL_KEY
                  valueFrom:
                    configMapKeyRef:
                      name: special-config
                      key: special.how
                - name: SPECIAL_TYPE_KEY
                  valueFrom:
                    configMapKeyRef:
                      name: special-config
                      key: special.type
        # 第三种方式：通过数据卷插件使用ConfigMap
        spec:
          containers:
            - name: test-container
              image: hub.kaikeba.com/library/myapp:v1
              command: [ "/bin/sh", "-c", "sleep 600s" ]
              volumeMounts:
                - name: config-volume
                  mountPath: /etc/config # 表示把conifg-volume挂载卷挂载到容器的/etc/config目录下
          volumes:    # 开启挂载外部configmap
            - name: config-volume
              configMap:
                name: special-config
        configmap热更新: kubectl edit configmap log-config
    secret：
        # secret.yaml配置文件方式
        apiVersion: v1
        kind: Secret
        metadata:
          name: mysecret
        type: Opaque
        data:
         password: YWJjZGVmZ2g=
         username: YWRtaW4=

        # 将secret挂载到volume中
        spec:
          volumes:
          - name: secrets
            secret:
              secretName: mysecret
          containers:
          - image: hub.kaikeba.com/java12/myapp:v1
            name: db
            volumeMounts:
            - name: secrets
              mountPath: "/etc/secrets"
              readOnly: true

        # 将secret导出到环境变量中
        spec:
          containers:
          - name: pod-1
            image: hub.kaikeba.com/java12/myapp:v1
            ports:
            - containerPort: 80
            env:
            - name: TEST_USER
              valueFrom:
                secretKeyRef:
                  name: mysecret
                  key: username
            - name: TEST_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysecret
                  key: password